from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse, parse_qs
import base64

class MyHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        # Analyse de l'URL pour obtenir le chemin et les paramètres de requête
        parsed_path = urlparse(self.path)
        query_params = parse_qs(parsed_path.query)

        # Vérifier si le chemin est /flag et si le paramètre est présent et décodable en base64
        if parsed_path.path == '/flag' and 'param' in query_params:

            decoded_param = ""

            # Décodage du paramètre en base64
            try:
                decoded_param = base64.b64decode(query_params['param'][0]).decode('utf-8').lower()
            except:
                self.send_response(404)
                self.send_header('Access-Control-Allow-Origin', 'http://79.137.38.217')  # Autoriser l'origine spécifiée
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Failed to decode param')

            # Vérification si 'googlebot' est présent en minuscules dans le paramètre décodé
            if 'googlebot' in decoded_param:
                self.send_response(200)
                self.send_header('Access-Control-Allow-Origin', 'http://79.137.38.217')  # Autoriser l'origine spécifiée
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'CTFrench{G00gle_BOT_Crawl3r_iS_nOt_SaFe}')
            else:
                self.send_response(403)
                self.send_header('Access-Control-Allow-Origin', 'http://79.137.38.217')  # Autoriser l'origine spécifiée
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Forbidden')
        else:
            self.send_response(404)
            self.send_header('Access-Control-Allow-Origin', 'http://79.137.38.217')  # Autoriser l'origine spécifiée
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Not Found')

def run_server():
    server_address = ('', 8000)
    httpd = HTTPServer(server_address, MyHTTPRequestHandler)
    print('Server running at http://localhost:8000/')
    httpd.serve_forever()

if __name__ == '__main__':
    run_server()
